 # parser.py
import logging
import re
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC

logging.basicConfig(level=logging.INFO)

CHROME_PROFILE_PATH = "C:/Users/aizha/goszakup-profile"
CHROMEDRIVER_PATH = "C:/Users/aizha/Downloads/chromedriver-win64/chromedriver-win64/chromedriver.exe"

def init_driver():
    logging.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –ø—Ä–æ—Ñ–∏–ª—è...")
    chrome_options = Options()
    chrome_options.add_argument(f"user-data-dir={CHROME_PROFILE_PATH}")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    return webdriver.Chrome(service=Service(CHROMEDRIVER_PATH), options=chrome_options)

def parse_lots(url):
    driver = init_driver()
    logging.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
    driver.get(url)

    try:
        logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ—Ç–∞–º–∏...")
        WebDriverWait(driver, 15).until(
            EC.presence_of_all_elements_located((By.XPATH, '//table[contains(@class,"table")]/tbody/tr'))
        )
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception:
        driver.quit()
        raise Exception("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å –ª–æ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

    lots = []
    rows = driver.find_elements(By.XPATH, '//table[contains(@class,"table")]/tbody/tr')
    for row in rows:
        try:
            tds = row.find_elements(By.TAG_NAME, 'td')
            lot_a = tds[1].find_element(By.CLASS_NAME, "btn-select-lot")
            lot_id = lot_a.get_attribute("data-lot-id").strip()

            number = tds[1].text.strip().split()[0]
            name = tds[3].text.strip()
            details = tds[4].text.strip()
            quantity = tds[6].text.strip()
            unit = tds[7].text.strip()
            price = tds[8].text.strip()
            text = f"{number} ‚Äî {name} ({details}) ‚Äî {quantity} {unit} ‚Äî {price} ‚Ç∏"

            lots.append({
                "id": lot_id,
                "text": text
            })
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏: {e}")
            continue

    driver.quit()
    logging.info(f"üì¶ –°–ø–∞—Ä—Å–µ–Ω–æ {len(lots)} –ª–æ—Ç–æ–≤.")
    return lots

def fast_jump_to_application(tender_url, saved_lot_ids):
    driver = init_driver()

    match = re.search(r'/announce/index/(\d+)', tender_url)
    if not match:
        driver.quit()
        raise ValueError("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å app_id –∏–∑ —Å—Å—ã–ª–∫–∏.")

    app_id = match.group(1)
    create_url = f"https://v3bl.goszakup.gov.kz/ru/application/create/{app_id}"
    logging.info(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {create_url}")
    
    driver.get(create_url)

    try:
        WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, '//form[contains(@action, "/application/create/")]'))
        )
        logging.info("‚úÖ –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        fill_application_form(driver, saved_lot_ids)
    except Exception as e:
        driver.quit()
        logging.warning(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—à–∏–±–∫–∞: {e}")
        return None

def fill_application_form(driver, saved_lot_ids):
    try:
        subject_select = Select(driver.find_element(By.NAME, "subject_address"))
        for option in subject_select.options:
            if option.get_attribute("value") != "0":
                subject_select.select_by_value(option.get_attribute("value"))
                break

        iik_select = Select(driver.find_element(By.NAME, "iik"))
        for option in iik_select.options:
            if option.get_attribute("value") != "0":
                iik_select.select_by_value(option.get_attribute("value"))
                break

        phone_input = driver.find_element(By.NAME, "contact_phone")
        phone_input.clear()
        phone_input.send_keys("87476083836")

        next_button = driver.find_element(By.ID, "next-without-captcha")
        next_button.click()

        time.sleep(5)
        select_and_add_lots(driver, saved_lot_ids)
        logging.info("‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã: {e}")
    finally:
        driver.quit()
        logging.info("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

def select_and_add_lots(driver, saved_lot_ids):
    try:
        logging.info("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–æ—Ç–æ–≤...")
        WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.XPATH, '//input[@type="checkbox" and @name="selectLots[]"]'))
        )
        checkboxes = driver.find_elements(By.XPATH, '//input[@type="checkbox" and @name="selectLots[]"]')

        logging.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(checkboxes)} –ª–æ—Ç–æ–≤. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ...")
        for checkbox in checkboxes:
            lot_id = checkbox.get_attribute("value")
            if lot_id in saved_lot_ids and not checkbox.is_selected():
                checkbox.click()
                time.sleep(0.2)

        logging.info("‚ûï –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ'")
        add_button = driver.find_element(By.ID, "add_lots")
        add_button.click()
        time.sleep(3)

        logging.info("‚úÖ –õ–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–æ—Ç–æ–≤: {e}")
        driver.quit()
import os
import time
import pyautogui
import pyperclip
from time import time as now
from logging import getLogger, basicConfig, INFO
from pywinauto.application import Application

# Setup logging
basicConfig(level=INFO)
logger = getLogger("eds")

# Required for confidence matching
# Make sure you have opencv-python installed: pip install opencv-python
pyautogui_images = os.path.join(os.path.dirname(__file__), "screens")


class ProjectError(Exception):
    """Custom exception for project-related errors."""
    pass


class EdsManager:
    def __init__(self, eds_path: str, eds_pass: str):
        self.eds_path = eds_path
        self.eds_pass = eds_pass

    def wait_for_ncalayer_window(self, timeout=10):
        try:
            self.app = Application(backend="uia").connect(
                title_re=".*(–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≠–¶–ü|–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç).*", timeout=timeout
            )
            self.window = self.app.top_window()
            self.window.set_focus()
            logger.info("ü™ü –û–∫–Ω–æ NCALayer –Ω–∞–π–¥–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
            return self.window.window_text()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û–∫–Ω–æ NCALayer –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
            return None

    def execute_sign_by_eds(self):
        try:
            window_title = self.wait_for_ncalayer_window()
            if not window_title:
                raise ProjectError("–û–∫–Ω–æ NCALayer –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            if "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≠–¶–ü" in window_title:
                logger.info("üü° –†–µ–∂–∏–º: –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
                self.try_click_yellow_iin()
                self.click_password_form()
                self.enter_password_form()

            elif "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" in window_title:
                logger.info("üìÅ –†–µ–∂–∏–º: –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
                self.indicate_eds_path()
                self.click_password_form()
                self.enter_password_form()

        except Exception as e:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –≠–¶–ü: %s", e)

    def click_obj(self, image_name: str, timeout=10):
        image_path = os.path.join(pyautogui_images, image_name)
        start = now()
        while now() - start < timeout:
            location = pyautogui.locateCenterOnScreen(image_path, confidence=0.7)
            if location:
                pyautogui.click(location)
                logger.info(f"‚úÖ –ö–ª–∏–∫ –ø–æ {image_name}")
                logger.info(f"‚úÖ –ö–ª–∏–∫ –ø–æ {image_name} –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {location}")
                return True
            time.sleep(1)
        logger.warning(f"üì∑ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        return False

    def try_click_yellow_iin(self):
        return self.click_obj("yellow_button.png", timeout=3)

    def click_choose_btn(self):
        time.sleep(0.5)
        self.window.set_focus()
        if not self.click_obj("personal_comp.png"):
            raise FileNotFoundError("–ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def click_path_form(self):
        time.sleep(0.5)
        self.window.set_focus()
        self.click_obj("form_exist.png")

    def indicate_eds_path(self):
        time.sleep(0.5)
        pyperclip.copy(self.eds_path)
        pyautogui.hotkey("ctrl", "v")
        pyautogui.press("enter")
        logger.info("üìã –í—Å—Ç–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ –≠–¶–ü")

    def click_password_form(self):
        time.sleep(0.5)
        self.window.set_focus()
        self.click_obj("form_pass.png")

    def enter_password_form(self):
        time.sleep(0.5)
        pyperclip.copy(self.eds_pass)
        pyautogui.hotkey("ctrl", "v")
        pyautogui.press("enter")
        logger.info("üîë –ü–∞—Ä–æ–ª—å –≤—Å—Ç–∞–≤–ª–µ–Ω")
